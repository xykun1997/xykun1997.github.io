<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>shell入门——参数的传递和数组</title>
    <link href="/2018/03/13/shell%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/"/>
    <url>/2018/03/13/shell%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/</url>
    
    <content type="html"><![CDATA[<h2 id="shell传递参数"><a href="#shell传递参数" class="headerlink" title="shell传递参数"></a><strong>shell传递参数</strong></h2><table><thead><tr><th align="center">参数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">$0</td><td align="center">当前脚本的文件名</td></tr><tr><td align="center">n</td><td align="center">传递给脚本或函数的参数。n是一个数字，表示第几个参数。例如,第一个参数是$1，第二个参数是$2</td></tr><tr><td align="center">$#</td><td align="center">传递给脚本或函数的参数个数。</td></tr><tr><td align="center">$*</td><td align="center">传递给脚本或函数的所有参数。(整体)</td></tr><tr><td align="center">$@</td><td align="center">传递给脚本或函数的所有参数。(单个)</td></tr><tr><td align="center">$?</td><td align="center">上个命令的退出状态，或函数的返回值。</td></tr><tr><td align="center">$$</td><td align="center">当前Shell进程ID。对于Shell脚本，就是这些脚本所在的进程ID。</td></tr></tbody></table><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a><strong>命令行参数</strong></h3><p>运行脚本时传递给脚本的参数称为命令行参数。命令行参数用 $n 表示，例如，$1 表示第一个参数，$2 表示第二个参数，依次类推。<br><strong>实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Shell 传递参数实例！&quot;</span>;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;执行的文件名：<span class="hljs-variable">$0</span>&quot;</span>;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第一个参数为：<span class="hljs-variable">$1</span>&quot;</span>;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第二个参数为：<span class="hljs-variable">$2</span>&quot;</span>;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第三个参数为：<span class="hljs-variable">$3</span>&quot;</span>;<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">Shell</span> 传递参数实例！<br>执行的文件名：./sh01.<span class="hljs-keyword">sh</span><br>第一个参数为：1<br>第二个参数为：2<br>第三个参数为：3<br></code></pre></td></tr></table></figure><h3 id="和-的区别"><a href="#和-的区别" class="headerlink" title="$*和$@的区别"></a><strong>$*和$@的区别</strong></h3><p>$* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号(“ “)包含时，都以”$1” “$2” … “$n” 的形式输出所有参数。</p><p>但是当它们被双引号(“ “)包含时，”$*” 会将所有的参数作为一个整体，以”$1 $2 … $n”的形式输出所有参数；”$@” 会将各个参数分开，以”$1” “$2” … “$n” 的形式输出所有参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;-- \$* 演示 ---&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $*<br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$i</span>&quot;</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;-- \$@ 演示 ---&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable">$@</span><br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$i</span>&quot;</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;-- \&quot;\$*\&quot; 演示 ---&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;$*&quot;</span><br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$i</span>&quot;</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;-- \&quot;\$@\* 演示 ---&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span><br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$i</span>&quot;</span><br><span class="hljs-keyword">done</span><br><br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">./sh02.sh <span class="hljs-keyword">a</span> b c d<br><span class="hljs-comment">-- $* 演示 ---</span><br><span class="hljs-keyword">a</span><br>b<br>c<br>d<br><span class="hljs-comment">-- $@ 演示 ---</span><br><span class="hljs-keyword">a</span><br>b<br>c<br>d<br><span class="hljs-comment">-- &quot;$*&quot; 演示 ---</span><br><span class="hljs-keyword">a</span> b c d<br><span class="hljs-comment">-- &quot;$@\* 演示 ---</span><br><span class="hljs-keyword">a</span><br>b<br>c<br>d<br></code></pre></td></tr></table></figure><h2 id="shell数组"><a href="#shell数组" class="headerlink" title="shell数组"></a><strong>shell数组</strong></h2><p>数组中可以存放多个值。Bash Shell 只支持一维数组（不支持多维数组），初始化时不需要定义数组大小，与大部分编程语言类似，数组元素的下标由0开始。 Shell 数组用括号来表示，元素用”空格”符号分割开。</p><h3 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a><strong>数组的定义</strong></h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#方法一</span><br><span class="hljs-attribute">array</span>=(A B C D)<br><span class="hljs-comment">#方法二</span><br><span class="hljs-attribute">array</span>[<span class="hljs-number">0</span>]=A<br><span class="hljs-attribute">array</span>[<span class="hljs-number">1</span>]=B<br><span class="hljs-attribute">arraye</span>[<span class="hljs-number">2</span>]=C<br></code></pre></td></tr></table></figure><h3 id="读取数组元素的值"><a href="#读取数组元素的值" class="headerlink" title="读取数组元素的值"></a><strong>读取数组元素的值</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">!/bin/bash<br><br>array=(A B C D)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第一个元素为: <span class="hljs-variable">$&#123;array[0]&#125;</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第二个元素为: <span class="hljs-variable">$&#123;array[1]&#125;</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第三个元素为: <span class="hljs-variable">$&#123;array[2]&#125;</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第四个元素为: <span class="hljs-variable">$&#123;array[3]&#125;</span>&quot;</span><br><br><span class="hljs-comment"># 运行结果</span><br>第一个元素为: A<br>第二个元素为: B<br>第三个元素为: C<br>第四个元素为: D<br></code></pre></td></tr></table></figure><h3 id="获取数组所有元素的值"><a href="#获取数组所有元素的值" class="headerlink" title="获取数组所有元素的值"></a><strong>获取数组所有元素的值</strong></h3><p>使用@ 或 * 可以获取数组中的所有元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>array[0]=A<br>array[1]=B<br>array[2]=C<br>array[3]=D<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;数组的元素为: <span class="hljs-variable">$&#123;array[*]&#125;</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;数组的元素为: <span class="hljs-variable">$&#123;array[@]&#125;</span>&quot;</span><br><br><span class="hljs-comment">#运行结果</span><br>数组的元素为: A B C D<br>数组的元素为: A B C D<br></code></pre></td></tr></table></figure><h3 id="获取数组长度"><a href="#获取数组长度" class="headerlink" title="获取数组长度"></a><strong>获取数组长度</strong></h3><p>获取数组长度的方法与获取字符串长度的方法相同，前面加#号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>my_array[0]=A<br>my_array[1]=B<br>my_array[2]=C<br>my_array[3]=D<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;数组元素个数为: <span class="hljs-variable">$&#123;#my_array[@]&#125;</span>&quot;</span><br><br><span class="hljs-comment">#运行结果</span><br>数组元素个数为: 4<br></code></pre></td></tr></table></figure><h3 id="循环赋值与输出"><a href="#循环赋值与输出" class="headerlink" title="循环赋值与输出"></a><strong>循环赋值与输出</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">declare</span> -a arry<br>i=0<br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;输入数组长度:&quot;</span> length<br><span class="hljs-keyword">while</span> [ <span class="hljs-variable">$i</span> -lt <span class="hljs-variable">$length</span> ]<br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;input <span class="hljs-variable">$i</span>:&quot;</span> n<br>arry[<span class="hljs-variable">$i</span>]=<span class="hljs-string">&quot;<span class="hljs-variable">$n</span>&quot;</span><br><span class="hljs-built_in">let</span> i++<br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;-------::::WHILE循环输出 使用 let i++ 自增:::::---------&quot;</span><br>j=0<br><span class="hljs-keyword">while</span> [ <span class="hljs-variable">$j</span> -lt <span class="hljs-variable">$&#123;#arry[@]&#125;</span> ]<br><span class="hljs-keyword">do</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;arry[$j]&#125;</span><br>  <span class="hljs-built_in">let</span> j++<br><span class="hljs-keyword">done</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>shell入门——基本运算符</title>
    <link href="/2018/03/11/shell%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2018/03/11/shell%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="shell基本运算符"><a href="#shell基本运算符" class="headerlink" title="shell基本运算符"></a>shell基本运算符</h2><h3 id="类别介绍"><a href="#类别介绍" class="headerlink" title="类别介绍"></a>类别介绍</h3><ul><li>算术运算符</li><li>关系运算符</li><li>布尔运算符</li><li>字符串运算符</li><li>文件测试运算符</li></ul><h3 id="几点注意"><a href="#几点注意" class="headerlink" title="几点注意"></a>几点注意</h3><ul><li>在进行求值操作时要使用expr</li><li>表达式和运算符之间必须要有空格</li><li>算数表达式要完全被&#96;&#96;包含<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">a=`<span class="hljs-built_in">expr</span> 2 + 2`<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;两数之和为 : <span class="hljs-variable">$a</span>&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a><strong>算数运算符</strong></h3><table><thead><tr><th align="center">运算符</th><th align="center">说明</th><th align="center">使用举例</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加法</td><td align="center"><code>expr $a + $b</code></td></tr><tr><td align="center">-</td><td align="center">减法</td><td align="center"><code>expr $a - $b</code></td></tr><tr><td align="center">*</td><td align="center">乘法</td><td align="center"><code>expr $a \* $b</code></td></tr><tr><td align="center">&#x2F;</td><td align="center">除法</td><td align="center"><code>expr $a / $b</code></td></tr><tr><td align="center">%</td><td align="center">取余</td><td align="center"><code>expr $a % $b</code></td></tr><tr><td align="center">&#x3D;</td><td align="center">赋值</td><td align="center">a &#x3D; $b 将变量b的值赋给a</td></tr><tr><td align="center">&#x3D;&#x3D;</td><td align="center">判相等，相同为true</td><td align="center">[ $a &#x3D;&#x3D; $b ]</td></tr><tr><td align="center">!&#x3D;</td><td align="center">判不等，不等为true</td><td align="center">[ $a !&#x3D; $b ]</td></tr></tbody></table><p><strong>注意</strong>：</p><ol><li>乘号(*)前边必须加反斜杠(\)转义才能实现乘法运算；</li><li>条件表达式要放在方括号之间，并且要有空格，例如: [$a&#x3D;&#x3D;$b] 是错误的，必须写成 [ $a &#x3D;&#x3D; $b ]。<br><strong>实例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>a=10<br>b=20<br><br>val=`<span class="hljs-built_in">expr</span> <span class="hljs-variable">$a</span> + <span class="hljs-variable">$b</span>`<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a + b : <span class="hljs-variable">$val</span>&quot;</span><br><br>val=`<span class="hljs-built_in">expr</span> <span class="hljs-variable">$a</span> - <span class="hljs-variable">$b</span>`<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a - b : <span class="hljs-variable">$val</span>&quot;</span><br><br>val=`<span class="hljs-built_in">expr</span> <span class="hljs-variable">$a</span> \* <span class="hljs-variable">$b</span>`<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a * b : <span class="hljs-variable">$val</span>&quot;</span><br><br>val=`<span class="hljs-built_in">expr</span> <span class="hljs-variable">$b</span> / <span class="hljs-variable">$a</span>`<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;b / a : <span class="hljs-variable">$val</span>&quot;</span><br><br>val=`<span class="hljs-built_in">expr</span> <span class="hljs-variable">$b</span> % <span class="hljs-variable">$a</span>`<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;b % a : <span class="hljs-variable">$val</span>&quot;</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> == <span class="hljs-variable">$b</span> ]<br><span class="hljs-keyword">then</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a 等于 b&quot;</span><br><span class="hljs-keyword">else</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a 不等于 b&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure>输出结果<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">a</span> + <span class="hljs-selector-tag">b</span> : <span class="hljs-number">30</span><br><span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">-</span> <span class="hljs-selector-tag">b</span> : <span class="hljs-selector-tag">-10</span><br><span class="hljs-selector-tag">a</span> * <span class="hljs-selector-tag">b</span> : <span class="hljs-number">200</span><br><span class="hljs-selector-tag">b</span> / <span class="hljs-selector-tag">a</span> : <span class="hljs-number">2</span><br><span class="hljs-selector-tag">b</span> % <span class="hljs-selector-tag">a</span> : <span class="hljs-number">0</span><br><span class="hljs-selector-tag">a</span> 不等于 <span class="hljs-selector-tag">b</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a><strong>关系运算符</strong></h3><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字<br>假设a&#x3D;20; b&#x3D;30.</p><table><thead><tr><th align="center">运算符</th><th align="center">说明</th><th align="center">使用举例</th></tr></thead><tbody><tr><td align="center">-eq</td><td align="center">两个变量相等 返回 true</td><td align="center">[ $a -eq $b ] 返回false</td></tr><tr><td align="center">-ne</td><td align="center">两个变量不相等 返回 true</td><td align="center">[ $a -ne $b ] 返回true</td></tr><tr><td align="center">-gt</td><td align="center">左变量 &gt; 右变量  返回true</td><td align="center">[ $a -gt $b ] 返回false</td></tr><tr><td align="center">-lt</td><td align="center">左变量 &lt; 右变量  返回true</td><td align="center">[ $a -lt $b ] 返回true</td></tr><tr><td align="center">-ge</td><td align="center">左变量 &gt;&#x3D; 右变量  返回true</td><td align="center">[ $a -ge $b ] 返回false</td></tr><tr><td align="center">-le</td><td align="center">左变量 &lt;&#x3D; 右变量  返回true</td><td align="center">[ $a -le $b ] 返回true</td></tr><tr><td align="center"><strong>注意</strong></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">表达式要放在方括号之间，并且要有空格，[ $a -gt $b ]。</td><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a><strong>字符串运算符</strong></h3><p>假设a&#x3D;“zyk”;b&#x3D;“xy”.</p><table><thead><tr><th align="center">运算符</th><th align="center">说明</th><th align="center">使用举例</th></tr></thead><tbody><tr><td align="center">&#x3D;</td><td align="center">两个字符串相等 返回true</td><td align="center">[ $a &#x3D; $b ] 返回false</td></tr><tr><td align="center">!&#x3D;</td><td align="center">两个变量不相等 返回 true</td><td align="center">[ $a ！&#x3D; $b ] 返回true</td></tr><tr><td align="center">z</td><td align="center">字符串长度为0  返回true</td><td align="center">[ -z $a ] 返回false</td></tr><tr><td align="center">n</td><td align="center">字符串长度不为0  返回true</td><td align="center">[ -n $a ] 返回true</td></tr><tr><td align="center">str</td><td align="center">字符串不为空  返回true</td><td align="center">[ $a ] 返回true</td></tr></tbody></table><h3 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a><strong>文件测试运算符</strong></h3><p>file&#x3D;”&#x2F;shell-script&#x2F;sh02.sh”</p><table><thead><tr><th align="center">运算符</th><th align="center">说明</th><th align="center">使用举例</th></tr></thead><tbody><tr><td align="center">-b</td><td align="center">文件是块设备文件 返回true</td><td align="center">[ -b $file ]返回false</td></tr><tr><td align="center">-c</td><td align="center">文件是字符设备文件 返回 true</td><td align="center">[ -c $file ]返回false</td></tr><tr><td align="center">-d</td><td align="center">文件是目录文件 返回true</td><td align="center">[ -d $file ]返回false</td></tr><tr><td align="center">-f</td><td align="center">文件是普通文件(不是目录也不是设备文件)返回 true</td><td align="center">[ -f $file ]返回true</td></tr><tr><td align="center">-g</td><td align="center">文件设置了<a href="http://blog.csdn.net/turkeyzhou/article/details/2408222">SGID位</a>  返回true</td><td align="center">[ -g $file ]返回false</td></tr><tr><td align="center">-k</td><td align="center">文件设置了<a href="http://blog.csdn.net/baoendemao/article/details/52847641">粘着位</a>  返回true</td><td align="center">[ -k $file]返回false</td></tr><tr><td align="center">-p</td><td align="center">文件是有名管道 返回true</td><td align="center">[ -p $file ]返回false</td></tr><tr><td align="center">-u</td><td align="center">文件设置了<a href="http://blog.csdn.net/turkeyzhou/article/details/2408222">SUID位</a>  返回true</td><td align="center">[ -u $file ]返回false</td></tr><tr><td align="center">-r</td><td align="center">文件可读  返回true</td><td align="center">[ -r $file ]返回 true</td></tr><tr><td align="center">-w</td><td align="center">文件可写  返回true</td><td align="center">[ -w $file ] 返回true</td></tr><tr><td align="center">-x</td><td align="center">文件可执行  返回true</td><td align="center">[ -x $file ] 返回true</td></tr><tr><td align="center">-s</td><td align="center">文件不为空  返回true</td><td align="center">[ -s $file ] 返回true</td></tr><tr><td align="center">-e</td><td align="center">文件存在  返回true</td><td align="center">[ -e $file ] 返回true</td></tr></tbody></table><p> <strong>用法实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>file=<span class="hljs-string">&quot;/shell-script/sh02.sh&quot;</span><br><span class="hljs-keyword">if</span> [ -r <span class="hljs-variable">$file</span> ]<br><span class="hljs-keyword">then</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;文件可读&quot;</span><br><span class="hljs-keyword">else</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;文件不可读&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> [ -w <span class="hljs-variable">$file</span> ]<br><span class="hljs-keyword">then</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;文件可写&quot;</span><br><span class="hljs-keyword">else</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;文件不可写&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> [ -x <span class="hljs-variable">$file</span> ]<br><span class="hljs-keyword">then</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;文件可执行&quot;</span><br><span class="hljs-keyword">else</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;文件不可执行&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> [ -f <span class="hljs-variable">$file</span> ]<br><span class="hljs-keyword">then</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;文件为普通文件&quot;</span><br><span class="hljs-keyword">else</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;文件为特殊文件&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> [ -d <span class="hljs-variable">$file</span> ]<br><span class="hljs-keyword">then</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;文件是个目录&quot;</span><br><span class="hljs-keyword">else</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;文件不是个目录&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> [ -s <span class="hljs-variable">$file</span> ]<br><span class="hljs-keyword">then</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;文件不为空&quot;</span><br><span class="hljs-keyword">else</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;文件为空&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> [ -e <span class="hljs-variable">$file</span> ]<br><span class="hljs-keyword">then</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;文件存在&quot;</span><br><span class="hljs-keyword">else</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;文件不存在&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="shell注释的用法"><a href="#shell注释的用法" class="headerlink" title="shell注释的用法"></a><strong>shell注释的用法</strong></h3><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">#!bin/bash<br># echo <span class="hljs-string">&quot;我是单行注释，你看不到我&quot;</span><br><br>:&lt;&lt;!<br>echo <span class="hljs-string">&quot;我是多行注释1，你看不到我&quot;</span><br>echo <span class="hljs-string">&quot;我是多行注释2，你看不到我&quot;</span><br>!<br><br># 其实!可以随意命名，只要别跟中间的注释内容相同即可。当Shell脚本执行遇到:&lt;&lt;!，就不执行脚本了，一直到再碰!后才重新开始执行脚本。如果忘记!或者写错(由于已经不执行脚本了，所以即使写错也不会报错)，则:&lt;&lt;!之后的脚步将都不会执行。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>shell入门——变量</title>
    <link href="/2018/03/09/shell%E5%8F%98%E9%87%8F/"/>
    <url>/2018/03/09/shell%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="shell变量"><a href="#shell变量" class="headerlink" title="shell变量"></a>shell变量</h2><h3 id="1-使用变量：加美元符"><a href="#1-使用变量：加美元符" class="headerlink" title="1. 使用变量：加美元符"></a>1. 使用变量：加美元符</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">your_name=<span class="hljs-string">&quot;zhangyk&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$your_name</span> <span class="hljs-comment">#花括号作用是识别变量边界</span><br></code></pre></td></tr></table></figure><h3 id="2-只读变量readonly"><a href="#2-只读变量readonly" class="headerlink" title="2. 只读变量readonly"></a>2. 只读变量readonly</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">Url=<span class="hljs-string">&quot;http://www.zhangyukun.top&quot;</span><br><span class="hljs-keyword">readonly</span> Url  <span class="hljs-meta">#这样定义后变量的值不能被改变</span><br></code></pre></td></tr></table></figure><h3 id="3-删除变量"><a href="#3-删除变量" class="headerlink" title="3. 删除变量"></a>3. 删除变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">unset</span> your_name  <span class="hljs-comment">#变量被删除后不能再次使用，不能删除readonly变量</span><br></code></pre></td></tr></table></figure><h3 id="4-将命令的结果赋值给变量"><a href="#4-将命令的结果赋值给变量" class="headerlink" title="4.将命令的结果赋值给变量"></a>4.将命令的结果赋值给变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">variable=`<span class="hljs-built_in">command</span>`  <span class="hljs-comment">#注意是反引号不是单引号</span><br>variable=$(<span class="hljs-built_in">command</span>)  <span class="hljs-comment">#两种方式皆可，但第一种容易混淆。</span><br>ex:<br><span class="hljs-built_in">log</span>=$(<span class="hljs-built_in">cat</span> log.txt)<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$log</span><br>[2018-03-8 20:53:22] 张昱昆正在学习Shell基础<br></code></pre></td></tr></table></figure><h3 id="5-三种变量类型"><a href="#5-三种变量类型" class="headerlink" title="5.三种变量类型"></a>5.三种变量类型</h3><ul><li>局部变量：局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</li><li>环境变量：所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。（类似c的全局变量）<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-variable">$your_name</span><br></code></pre></td></tr></table></figure></li><li>shell变量：shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行</li></ul><h2 id="Shell-字符串"><a href="#Shell-字符串" class="headerlink" title="Shell 字符串"></a>Shell 字符串</h2><p>字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号。</p><h3 id="1-单引号和双引号的区别"><a href="#1-单引号和双引号的区别" class="headerlink" title="1. 单引号和双引号的区别"></a>1. 单引号和双引号的区别</h3><p>以单引号**’ ‘**包围变量的值时，单引号里面是什么就输出什么，即使内容中有变量和命令（命令需要反引起来）也会把它们原样输出。这种方式比较适合定义显示纯字符串的情况，即不希望解析变量、命令等的场景。</p><p>以双引号**” “**包围变量的值时，输出时会先解析里面的变量和命令，而不是把双引号中的变量名和命令原样输出。这种方式比较适合字符串中附带有变量和命令并且想将其解析后再输出的变量定义。</p><p>如下代码说明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>url=<span class="hljs-string">&quot;http://zhangyukun.top&quot;</span><br>website1=<span class="hljs-string">&#x27;kun&#x27;</span>s blog：<span class="hljs-variable">$&#123;url&#125;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">website2=&quot;kun&#x27;</span>s blog：<span class="hljs-variable">$&#123;url&#125;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">echo <span class="hljs-variable">$website1</span></span><br><span class="hljs-string">echo <span class="hljs-variable">$&#123;website2&#125;</span>  </span><br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rust">kun<span class="hljs-symbol">&#x27;s</span> blog：$&#123;url&#125;<br>kun<span class="hljs-symbol">&#x27;s</span> blog：http:<span class="hljs-comment">//zhangyukun.top </span><br></code></pre></td></tr></table></figure><h3 id="2-获取字符串长度"><a href="#2-获取字符串长度" class="headerlink" title="2. 获取字符串长度"></a>2. 获取字符串长度</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">str=“abc,def,ghi,abcjkl”  <br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;#str&#125;</span> <span class="hljs-comment">#在花括号中给变量名前加#号</span><br><span class="hljs-comment">#运行结果</span><br>18<br></code></pre></td></tr></table></figure><h3 id="3-字符串的截取"><a href="#3-字符串的截取" class="headerlink" title="3. 字符串的截取"></a>3. 字符串的截取</h3><h4 id="格式：-str-position"><a href="#格式：-str-position" class="headerlink" title="格式：${str:position}"></a>格式：${str:position}</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#从位置position+1开始截取  </span><br><span class="hljs-attribute">echo</span> <span class="hljs-variable">$&#123;str:5&#125;</span>   #从第<span class="hljs-number">5</span>+<span class="hljs-number">1</span>个元素开始截取<br><span class="hljs-comment">#运行结果：ef,ghi,abcjkl </span><br></code></pre></td></tr></table></figure><h4 id="格式：-str-start-length"><a href="#格式：-str-start-length" class="headerlink" title="格式：${str:start:length}"></a>格式：${str:start:length}</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#从start+1开始截取长度为length的字符串  </span><br><span class="hljs-attribute">echo</span> <span class="hljs-variable">$&#123;str:5：8&#125;</span>   #从第<span class="hljs-number">5</span>+<span class="hljs-number">1</span>个元素开始截取长度<span class="hljs-number">8</span><br><span class="hljs-comment">#运行结果：ef,ghi,a </span><br></code></pre></td></tr></table></figure><h4 id="格式：-str-substring-或-str-substring"><a href="#格式：-str-substring-或-str-substring" class="headerlink" title="格式：${str#*substring}或${str##*substring}"></a>格式：${str#*substring}或${str##*substring}</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#从str开头开始删除到最近的substring包括substring</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;str#*c&#125;</span>   <span class="hljs-comment">#删除 开始~c *为通配符</span><br><span class="hljs-comment">#运行结果：,def,ghi,abcjkl </span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#从str开头开始删除到最远的substring包括substring</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;str##*c&#125;</span>   <span class="hljs-comment">#删除 开始~c *为通配符</span><br><span class="hljs-comment">#运行结果：jkl</span><br></code></pre></td></tr></table></figure><h4 id="格式-str-substring-或-str-substring"><a href="#格式-str-substring-或-str-substring" class="headerlink" title="格式${str%substring*}或${str%%substring*}"></a>格式${str%substring*}或${str%%substring*}</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#从str结尾开始删除到最近的substring包括substring</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;str%c*&#125;</span>   <span class="hljs-comment">#删除 c~结尾 *为通配符</span><br><span class="hljs-comment">#运行结果：abc,def,ghi,ab </span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#从str结尾开始删除到最远的substring包括substring</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;str%%c*&#125;</span>   <span class="hljs-comment">#删除 c~结尾 *为通配符</span><br><span class="hljs-comment">#运行结果：ab</span><br></code></pre></td></tr></table></figure><p>总结<br> #、## 表示从左边开始删除。一个 # 表示从左边删除到第一个指定的字符；两个 # 表示从左边删除到最后一个指定的字符。<br>%、%% 表示从右边开始删除。一个 % 表示从右边删除到第一个指定的字符；两个 % 表示从左边删除到最后一个指定的字符。<br>删除包括了指定的字符本身。</p><h3 id="4-字符串的替换"><a href="#4-字符串的替换" class="headerlink" title="4. 字符串的替换"></a>4. 字符串的替换</h3><h4 id="格式-str-x2F-substring-x2F-replace或-str-x2F-x2F-substring-x2F-replace"><a href="#格式-str-x2F-substring-x2F-replace或-str-x2F-x2F-substring-x2F-replace" class="headerlink" title="格式 ${str&#x2F;substring&#x2F;replace或${str&#x2F;&#x2F;substring&#x2F;replace}"></a>格式 ${str&#x2F;substring&#x2F;replace或${str&#x2F;&#x2F;substring&#x2F;replace}</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#用TEST替换字符串中第一个abc  </span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;str/abc/TEST&#125;</span>  <br><span class="hljs-comment">#运行结果：TEST,def,ghi,abcjkl  </span><br></code></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-meta">#用TEST替换字符串所有的abc  </span><br>echo $&#123;<span class="hljs-built_in">str</span><span class="hljs-comment">//abc/TEST&#125;  </span><br><span class="hljs-meta">#运行结果：TEST,def,ghi,TESTjkl  </span><br></code></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-meta">#从str开头匹配，用TEST替换最长的a*c  </span><br>echo $&#123;<span class="hljs-built_in">str</span>/<span class="hljs-meta">#*c/TEST&#125;  </span><br><span class="hljs-meta">#TESTjkl </span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>交换基础(1)--交换机</title>
    <link href="/2017/10/26/--%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%9F%BA%E7%A1%80--/"/>
    <url>/2017/10/26/--%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%9F%BA%E7%A1%80--/</url>
    
    <content type="html"><![CDATA[<h2 id="交换机基础"><a href="#交换机基础" class="headerlink" title="交换机基础"></a><strong>交换机基础</strong></h2><h3 id="交换机的作用"><a href="#交换机的作用" class="headerlink" title="交换机的作用"></a>交换机的作用</h3><p>交换机工作在OSI的数据链路层，操作对象为数据帧。在收到数据帧后，交换机会根据数据帧的头部信息对数据帧进行转发（隔离冲突域）</p><h3 id="交换机的MAC地址表（转发表）"><a href="#交换机的MAC地址表（转发表）" class="headerlink" title="交换机的MAC地址表（转发表）"></a>交换机的MAC地址表（转发表）</h3><table><thead><tr><th>Vlan</th><th>MAC Address</th><th>Type</th><th>Interface</th></tr></thead><tbody><tr><td>1</td><td>00-00-00-11-11-11</td><td>STATIC</td><td>e0&#x2F;0&#x2F;1</td></tr><tr><td>1</td><td>00-00-00-22-22-22</td><td>DYNAMIC</td><td>e0&#x2F;0&#x2F;3</td></tr><tr><td>2</td><td>00-00-00-33-33-33</td><td>STATIC</td><td>e0&#x2F;0&#x2F;6</td></tr></tbody></table><h3 id="三种操作行为"><a href="#三种操作行为" class="headerlink" title="三种操作行为"></a>三种操作行为</h3><ul><li>泛洪：数据帧中的目的MAC地址不在交换机的MAC地址表中，则向所有端口转发，这一过程称为泛洪（flood）。</li><li>转发：数据帧中的目的MAC地址在交换机的MAC地址表中，则根据转发表直接转发。</li><li>丢弃：泛洪之后仍没有学习到目的主机的MAC地址，则丢弃。</li></ul><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul><li>收到单播帧：交换机在接收到数据帧以后，首先、会记录数据帧中的源MAC地址和对应的接口到MAC表中，接着、会检查自己的MAC表中是否有数据帧中目标MAC地址的信息，如果有则会根据MAC表中记录的对应接口将数据帧发送出去(也就是单播)，如果没有，则会将该数据帧从非接受接口发送出去(也就是广播)</li><li>收到广播帧：直接进行泛洪操作。</li></ul><h3 id="工作过程"><a href="#工作过程" class="headerlink" title="工作过程"></a>工作过程</h3><p><img src="http://img1.51cto.com/attachment/201306/172813479.jpg" alt="image"></p><ul><li>主机A发送一个源MAC地址是自己，目的MAC地址为主机B的的MAC地址的数据帧给交换机。</li><li>交换机收到此数据帧后，首先将数据帧中的源MAC地址(00-00-00-11-11-11)和对应的接口(接口为f0&#x2F;1) 记录到MAC地址表中。</li></ul><table><thead><tr><th>Vlan</th><th>MAC Address</th><th>Type</th><th>Interface</th></tr></thead><tbody><tr><td>1</td><td>00-00-00-11-11-11</td><td>STATIC</td><td>f0&#x2F;1</td></tr></tbody></table><ul><li>然后交换机会检查自己的MAC地址表中是否有数据帧中的目标MAC地址的信息，如果有，则从MAC地址表中记录的接口发送出去，如果没有，则会将此数据帧从除接收接口(f0&#x2F;1接口)外的所有接口发送出(泛洪）。</li><li>主机B收到此数据帧时会响应这个广播，并回应一个数据帧(源MAC地址是自己，目的MAC地址为主机A的MAC地址）给交换机。</li><li>交换机收到主机B回应的数据帧后，也会记录数据帧中的源MAC地址(00-00-00-22-22-22)和对应接口(f0&#x2F;2)</li></ul><table><thead><tr><th>Vlan</th><th>MAC Address</th><th>Type</th><th>Interface</th></tr></thead><tbody><tr><td>1</td><td>00-00-00-11-11-11</td><td>STATIC</td><td>f0&#x2F;1</td></tr><tr><td>1</td><td>00-00-00-22-22-22</td><td>DYNAMIC</td><td>f0&#x2F;2</td></tr></tbody></table><p> 这时，再当主机A和主机B通信时，交换机直接根据MAC地址表中的记录，实现单播了</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>交换基础(2)--STP</title>
    <link href="/2017/10/26/STP(%E7%94%9F%E6%88%90%E6%A0%91%E5%8D%8F%E8%AE%AE%EF%BC%89/"/>
    <url>/2017/10/26/STP(%E7%94%9F%E6%88%90%E6%A0%91%E5%8D%8F%E8%AE%AE%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="STP-生成树协议）"><a href="#STP-生成树协议）" class="headerlink" title="STP(生成树协议）"></a>STP(生成树协议）</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>STP(Spanning Tree Protocol)是生成树协议的英文缩写，它警惕的监视着网络中所有的链路，通过关闭任何冗余的接口来确保在网络中不会产生环路。</p><h2 id="产生"><a href="#产生" class="headerlink" title="产生"></a>产生</h2><p>随着局域网规模越来越大，越来越多的交换机被用来实现主机与主机之间的互联。为了避免单点故障引起整个业务的中端，一般会使用冗余链路实现备份。此方法虽然增加了互联的可靠性但随之可能会产生<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%8E%AF%E8%B7%AF/1391380?fr=aladdin">环路</a>问题，所以需要一种既能提供可靠的链路又能避免环路的方法。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ol><li>消除链路的环路</li><li>实现链路备份。</li></ol><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>通过选举根桥和非根桥来构造逻辑上的树形拓扑避免环路的产生</p><h2 id="过程详解"><a href="#过程详解" class="headerlink" title="过程详解"></a>过程详解</h2><h3 id="认识重点术语"><a href="#认识重点术语" class="headerlink" title="认识重点术语"></a>认识重点术语</h3><ol><li>根桥：整个交换网络的“根”。桥ID最小</li><li>非根桥：除根桥外其他的网桥都是非根桥</li><li>指定端口(D):所连网段发送BPDU的端口，每个网段只能有一个指定端口，根桥的每个端口都是指定端口。</li><li>根端口(R)：存在于非根桥上，是去往根桥的最优端口，一个交换机只能有一个根端口，根桥没有。</li><li>备端口(A)：一个端口既不是指定端口也不是根端口，即为预备端口，正常情况下被阻塞。<br> <img src="http://www.zhangyukunblog.top/%E4%B8%89%E7%A7%8D%E7%AB%AF%E5%8F%A3.jpg" alt="image"></li><li>桥ID：由16位的桥优先级（0~65535，默认为32768）和48位的MAC地址组成（先比较桥优先级，相同再比MAC）。</li><li>BPDU（桥协议数据单元）：BPDU是运行STP的交换机之间交换的消息帧。BPDU内包含了STP所需的路径和优先级信息，STP利用这些信息来确定根桥以及到根桥的路径。</li></ol><h3 id="根桥的选举"><a href="#根桥的选举" class="headerlink" title="根桥的选举"></a>根桥的选举</h3><p>依据桥ID，桥ID最小的为根桥。默认自己都是根桥，然后通过所有端口<br>转发BPDU报文，对端交换机和自己的比较，从而选举出根桥。如下图所示，A交换机被选举为根桥<br><img src="http://www.zhangyukunblog.top/%E9%80%89%E4%B8%BE%E6%A0%B9%E6%A1%A5.jpg" alt="image"></p><h3 id="根端口的选举"><a href="#根端口的选举" class="headerlink" title="根端口的选举"></a>根端口的选举</h3><h4 id="依据"><a href="#依据" class="headerlink" title="依据"></a>依据</h4><p>根路径开销(root path cost), 对端BID(Bridge id)，对端和本端的PID(Port id)。</p><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><p> a. 非根桥交换机上，哪个端口到根桥的开销（确切来说，应该是从根桥到达非根交换机的每个端口的开销，这才是正确的方向）最小，开销最小的端口，即为该非根交换机的根端口。<br> b. 如果到达根桥开销一样，此时再比较上一级（接收BPDU方向）发送者的桥ID。选出发送者桥ID最小的对应的端口。<br> c. 如果上一级发送者桥ID也一样，再比较发送端口的优先级(PID)。选出优先级最小的端口<br> d. 如果发送端口的PID相同，再比较自己的PID优先级，最终选出根端口。</p><p> 选举完成如下图所示<br><img src="http://www.zhangyukunblog.top/%E9%80%89%E4%B8%BE%E6%A0%B9%E7%AB%AF%E5%8F%A3.jpg" alt="image"></p><h3 id="指定端口的选举"><a href="#指定端口的选举" class="headerlink" title="指定端口的选举"></a>指定端口的选举</h3><ol><li>根桥的所有端口都是指定端口</li><li>类比根端口的选举。</li></ol><p>选举完成如下图所示<br><img src="http://www.zhangyukunblog.top/%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%E7%9A%84%E9%80%89%E4%B8%BE.jpg" alt="image"></p><h3 id="端口的状态转换"><a href="#端口的状态转换" class="headerlink" title="端口的状态转换"></a>端口的状态转换</h3><ol><li>Fowarding:转发状态，既可以转发用户流量也可转发BPDU报文。只有根端口和指定端口才能进入。</li><li>Learning：学习状态，大约停留15秒，开始学习MAC地址，构建网桥地址表。</li><li>Listening：侦听状态，大约停留15秒，除了接收BPDU外，还向邻居发送BPDU，通知邻居它将参与构建拓扑。</li><li>Blocking：阻塞状态，仅能接收并处理BPDU报文，不能进行任何转发操作，预备端口的最终状态</li><li>Disable:禁用状态，不进行任何操作。</li></ol><h3 id="几种因拓扑变化引起链路故障的实例"><a href="#几种因拓扑变化引起链路故障的实例" class="headerlink" title="几种因拓扑变化引起链路故障的实例"></a>几种因拓扑变化引起链路故障的实例</h3><p>后续</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>简单实例（回文数）学习顺序栈</title>
    <link href="/2017/10/25/%E5%9B%9E%E6%96%87%E6%95%B0%EF%BC%88%E9%A1%BA%E5%BA%8F%E6%A0%88%EF%BC%89/"/>
    <url>/2017/10/25/%E5%9B%9E%E6%96%87%E6%95%B0%EF%BC%88%E9%A1%BA%E5%BA%8F%E6%A0%88%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="顺序栈实现回文数判断"><a href="#顺序栈实现回文数判断" class="headerlink" title="顺序栈实现回文数判断"></a>顺序栈实现回文数判断</h1><h2 id="一-思路"><a href="#一-思路" class="headerlink" title="一. 思路"></a>一. 思路</h2><pre><code class="hljs">根据栈的定义：只允许在一段进行插入和删除操作的线性表。即先入栈的后出栈。所以在进行判断的时候可以只让栈中1/2的元素按出栈顺序出栈和原字符串的前1/2一一比较即可。</code></pre><h2 id="二-分步代码实现"><a href="#二-分步代码实现" class="headerlink" title="二. 分步代码实现"></a>二. 分步代码实现</h2><h3 id="1-类型描述及定义"><a href="#1-类型描述及定义" class="headerlink" title="1. 类型描述及定义"></a>1. 类型描述及定义</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <br>&#123;<br> <span class="hljs-type">char</span> date[<span class="hljs-number">10</span>];  <span class="hljs-comment">//定义栈的深度</span><br> <span class="hljs-type">int</span> top;   <span class="hljs-comment">//栈顶的指针，指明栈顶位置</span><br>&#125;seqstack;<br></code></pre></td></tr></table></figure><h3 id="2-创建空栈"><a href="#2-创建空栈" class="headerlink" title="2. 创建空栈"></a>2. 创建空栈</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">seqstack *creat()<br>&#123;<br> seqstack *s<span class="hljs-comment">;   //指向顺序栈的指针</span><br> s<span class="hljs-operator">=</span>(seqstack *)malloc(sizeof(seqstack))<span class="hljs-comment">;</span><br> s-&gt;top<span class="hljs-operator">=</span>-<span class="hljs-number">1</span><span class="hljs-comment">;  //初始化栈顶指针</span><br> return s<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-入栈"><a href="#3-入栈" class="headerlink" title="3. 入栈"></a>3. 入栈</h3><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xl">int push_seqstack(seqstack *s,char a[])<br>&#123;<br> int i=<span class="hljs-number">0</span>; <br> <span class="hljs-function"><span class="hljs-title">if</span>(s-&gt;</span>top==<span class="hljs-number">9</span>)   <span class="hljs-comment">//判断栈是否满栈</span><br>  return <span class="hljs-number">0</span>;<br> <span class="hljs-keyword">else</span><br> &#123;<br>  <span class="hljs-keyword">while</span>(a[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>)  判断是否到字符串的结尾<br>  &#123;<br>   <span class="hljs-function"><span class="hljs-title">s</span>-&gt;</span>top++;<br>   <span class="hljs-function"><span class="hljs-title">s</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">date</span>[s-&gt;</span>top]=a[i];<br>   fflush(stdin);<br>   i++; <br>  &#125;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-出栈1-x2F-2并与原数组的前1-x2F-2比较"><a href="#4-出栈1-x2F-2并与原数组的前1-x2F-2比较" class="headerlink" title="4. 出栈1&#x2F;2并与原数组的前1&#x2F;2比较"></a>4. 出栈1&#x2F;2并与原数组的前1&#x2F;2比较</h3><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs zephir">    <span class="hljs-keyword">int</span> out_seqstack(seqstack *s,<span class="hljs-keyword">char</span> a[])<br>    &#123;<br>    <span class="hljs-keyword">int</span> flag=<span class="hljs-number">1</span>; <br>    <span class="hljs-keyword">int</span> n=s-&gt;top;  <span class="hljs-comment">//标记此时栈内元素的个数</span><br>    <span class="hljs-keyword">if</span>(s-&gt;top==<span class="hljs-number">-1</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;(n+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;j++)<br>        &#123;<br><span class="hljs-keyword">if</span>(a[j]!=s-&gt;date[s-&gt;top]) <span class="hljs-comment">/*比较是否为回文数*/</span><br>flag=<span class="hljs-number">0</span>;<br>s-&gt;top--;<br>&#125;<br><span class="hljs-keyword">if</span>(flag==<span class="hljs-number">1</span>)<br>printf(<span class="hljs-string">&quot;回文&quot;</span>);<br><span class="hljs-keyword">else</span><br>printf(<span class="hljs-string">&quot;不是回文&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三-源代码"><a href="#三-源代码" class="headerlink" title="三. 源代码"></a>三. 源代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp">  <span class="hljs-meta">#includu<span class="hljs-string">&lt;stdio.h&gt;</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br>  <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <br>  &#123;<br>   <span class="hljs-type">char</span> date[<span class="hljs-number">10</span>];<br>   <span class="hljs-type">int</span> top; <br>  &#125;seqstack;<br>  <span class="hljs-function">seqstack *<span class="hljs-title">creat</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>   seqstack *s;<br>   s=(seqstack *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(seqstack));<br>   s-&gt;top=<span class="hljs-number">-1</span>;<br>   <span class="hljs-keyword">return</span> s;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">push_seqstack</span><span class="hljs-params">(seqstack *s,<span class="hljs-type">char</span> a[])</span></span><br><span class="hljs-function">  </span>&#123;<br>   <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; <br>   <span class="hljs-keyword">if</span>(s-&gt;top==<span class="hljs-number">9</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">while</span>(a[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>)<br>    &#123;<br>    s-&gt;top++;<br>    s-&gt;date[s-&gt;top]=a[i];<br>    <span class="hljs-built_in">fflush</span>(stdin);<br>    i++; <br>    &#125;<br>   &#125;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">out_seqstack</span><span class="hljs-params">(seqstack *s,<span class="hljs-type">char</span> a[])</span></span><br><span class="hljs-function">  </span>&#123;<br>   <span class="hljs-type">int</span> flag=<span class="hljs-number">1</span>; <br>  <span class="hljs-type">int</span> n=s-&gt;top;<br>   <span class="hljs-keyword">if</span>(s-&gt;top==<span class="hljs-number">-1</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">else</span><br>   &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;(n+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(a[j]!=s-&gt;date[s-&gt;top]) <span class="hljs-comment">/*比较是否为回文数*/</span><br>flag=<span class="hljs-number">0</span>;<br>s-&gt;top--;<br>&#125;<br><span class="hljs-keyword">if</span>(flag==<span class="hljs-number">1</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;回文&quot;</span>);<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;不是回文&quot;</span>);<br><br>&#125;<br>  &#125; <br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function">  </span>&#123;<br>   seqstack *s;<br>   <span class="hljs-type">char</span> a[<span class="hljs-number">10</span>];<br>   <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,a);<br>   s=<span class="hljs-built_in">creat</span>();<br>   <span class="hljs-built_in">push_seqstack</span>(s,a);<br>   <span class="hljs-built_in">out_seqstack</span>(s,a);<br>  &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>TCP的连接建立(三次握手)与断开(四次挥手)</title>
    <link href="/2017/10/23/tcp%E8%BF%90%E8%BE%93%E8%BF%9E%E6%8E%A5/"/>
    <url>/2017/10/23/tcp%E8%BF%90%E8%BE%93%E8%BF%9E%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="TCP的连接建立-三次握手-与断开-四次挥手"><a href="#TCP的连接建立-三次握手-与断开-四次挥手" class="headerlink" title="TCP的连接建立(三次握手)与断开(四次挥手)"></a>TCP的连接建立(三次握手)与断开(四次挥手)</h1><h2 id="连接过程需要考虑的三个问题"><a href="#连接过程需要考虑的三个问题" class="headerlink" title="连接过程需要考虑的三个问题"></a>连接过程需要考虑的三个问题</h2><ol><li>使建立双方都知道对方的存在</li><li>允许双方协商一些参数(最大窗口…)</li><li>对运输实体资源</li></ol><h2 id="需知"><a href="#需知" class="headerlink" title="需知"></a>需知</h2><p>TCP的建立采用客户服务器模式(c&#x2F;s)主动发起建立连接的应用进程是客户，被动等待连接的是服务器</p><h2 id="连接建立过程"><a href="#连接建立过程" class="headerlink" title="连接建立过程"></a>连接建立过程</h2><p>初始状态：连接双方的TCP进程都处于(CLOSED)状态；<strong>道Client是主动打开连接</strong>，<strong>Server是被动打开连接</strong>进入LISTEN状态；</p><p>(1)第一次握手：Client将标志位SYN置为1，随机产生一个值seq&#x3D;J，并将该数据包发送给Server，Client进入SYN-SENT(同步已发送)状态，等待Server确认。</p><p>(2)第二次握手：Server收到数据包后由标志位SYN&#x3D;1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack&#x3D;J+1，随机产生一个值seq&#x3D;K，并将该数据包发送给Client以确认连接请求，Server进入SYN-RCVD(同步收到)状态。</p><p>(3)第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack&#x3D;K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED(已建立连接)状态，完成三次握手，随后Client与Server之间可以开始传输数据了。</p><p> <img src="http://s4.51cto.com/wyfs02/M00/75/A5/wKiom1Y__jfCibe6AAAr9T4KX6s781.png" alt="image"></p><h2 id="连接释放过程"><a href="#连接释放过程" class="headerlink" title="连接释放过程"></a>连接释放过程</h2><p> 初始状态：Client和Server都处于ESTABLISHED(已建立连接)状态；<br> (1)第一次挥手：Client发送一个FIN&#x3D;1，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1(终止)状态。</p><p>(2)第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1(与SYN相同，一个FIN占用一个序号)，Server进入CLOSE_WAIT状态。</p><p>(3)第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK(最后确认)状态。</p><p>(4)第四次挥手：Client收到FIN后，Client进入TIME_WAIT(时间等待)状态，接着发送一个ACK给Server，确认序号为收到序号+1，经过2MSL(最长报文寿命)等待后Server进入CLOSED状态，完成四次挥手。</p><p><img src="http://s5.51cto.com/wyfs02/M01/75/A3/wKioL1Y__oeyXYjLAAAuUhKuLQs507.png" alt="image"></p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
